/*
 * LunaticSMTP
 * Copyright (C) 2016  Anton Larionov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'
    id 'idea'
}

repositories {
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    applicationName = 'LunaticSMTP'
    baseVersion = '0.1.0'
    mainClass = 'com.gitlab.anlar.lunatic.Lunatic'
    author = 'Anton Larionov'

    buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    gitRevision = 'git rev-parse HEAD'.execute().text.trim()
    gitShortRevision = 'git rev-parse --short HEAD'.execute().text.trim()
}

idea {
    project {
        jdkName = '1.8'
        vcs = 'Git'
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'org.slf4j:slf4j-log4j12:1.7.13'

    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.beust:jcommander:1.48'
    compile 'org.subethamail:subethasmtp:3.1.7'
}

tasks.withType(Jar) {
    manifest {
        attributes(
                'Created-By': "${System.getProperty("java.runtime.version")} (${System.getProperty("java.vm.vendor")})",
                'Build-Time': buildTime,

                'Specification-Title': applicationName,
                'Specification-Version': baseVersion,
                'Specification-Vendor': author,

                'Implementation-Title': applicationName,
                'Implementation-Version': baseVersion + '-' + gitRevision,
                'Implementation-Vendor': author,

                'Main-Class': mainClass
        )
    }
}

task('release', type: Jar, description: 'Assembles a jar archive with application.') {
    baseName = applicationName
    version = 'v' + baseVersion

    Properties props = new Properties()
    props.setProperty('version', baseVersion)
    props.setProperty('gitShortRevision', gitShortRevision)

    new File("build/resources/main").mkdirs()
    File propsFile = new File("build/resources/main/version.properties")
    propsFile.createNewFile()
    props.store(propsFile.newWriter(), null)

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}